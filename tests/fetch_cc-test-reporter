#! /bin/bash
# Disclaimer of Warranties.
# A. YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT, TO THE EXTENT PERMITTED BY
#    APPLICABLE LAW, USE OF THIS SHELL SCRIPT AND ANY SERVICES PERFORMED
#    BY OR ACCESSED THROUGH THIS SHELL SCRIPT IS AT YOUR SOLE RISK AND
#    THAT THE ENTIRE RISK AS TO SATISFACTORY QUALITY, PERFORMANCE, ACCURACY AND
#    EFFORT IS WITH YOU.
#
# B. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SHELL SCRIPT
#    AND SERVICES ARE PROVIDED "AS IS" AND “AS AVAILABLE”, WITH ALL FAULTS AND
#    WITHOUT WARRANTY OF ANY KIND, AND THE AUTHOR OF THIS SHELL SCRIPT'S LICENSORS
#    (COLLECTIVELY REFERRED TO AS "THE AUTHOR" FOR THE PURPOSES OF THIS DISCLAIMER)
#    HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH RESPECT TO THIS SHELL SCRIPT
#    SOFTWARE AND SERVICES, EITHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
#    NOT LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF
#    MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE,
#    ACCURACY, QUIET ENJOYMENT, AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS.
#
# C. THE AUTHOR DOES NOT WARRANT AGAINST INTERFERENCE WITH YOUR ENJOYMENT OF THE
#    THE AUTHOR's SOFTWARE AND SERVICES, THAT THE FUNCTIONS CONTAINED IN, OR
#    SERVICES PERFORMED OR PROVIDED BY, THIS SHELL SCRIPT WILL MEET YOUR
#    REQUIREMENTS, THAT THE OPERATION OF THIS SHELL SCRIPT OR SERVICES WILL
#    BE UNINTERRUPTED OR ERROR-FREE, THAT ANY SERVICES WILL CONTINUE TO BE MADE
#    AVAILABLE, THAT THIS SHELL SCRIPT OR SERVICES WILL BE COMPATIBLE OR
#    WORK WITH ANY THIRD PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES,
#    OR THAT DEFECTS IN THIS SHELL SCRIPT OR SERVICES WILL BE CORRECTED.
#    INSTALLATION OF THIS THE AUTHOR SOFTWARE MAY AFFECT THE USABILITY OF THIRD
#    PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES.
#
# D. YOU FURTHER ACKNOWLEDGE THAT THIS SHELL SCRIPT AND SERVICES ARE NOT
#    INTENDED OR SUITABLE FOR USE IN SITUATIONS OR ENVIRONMENTS WHERE THE FAILURE
#    OR TIME DELAYS OF, OR ERRORS OR INACCURACIES IN, THE CONTENT, DATA OR
#    INFORMATION PROVIDED BY THIS SHELL SCRIPT OR SERVICES COULD LEAD TO
#    DEATH, PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE,
#    INCLUDING WITHOUT LIMITATION THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
#    NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, LIFE SUPPORT OR
#    WEAPONS SYSTEMS.
#
# E. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY THE AUTHOR
#    SHALL CREATE A WARRANTY. SHOULD THIS SHELL SCRIPT OR SERVICES PROVE DEFECTIVE,
#    YOU ASSUME THE ENTIRE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#    Limitation of Liability.
# F. TO THE EXTENT NOT PROHIBITED BY APPLICABLE LAW, IN NO EVENT SHALL THE AUTHOR
#    BE LIABLE FOR PERSONAL INJURY, OR ANY INCIDENTAL, SPECIAL, INDIRECT OR
#    CONSEQUENTIAL DAMAGES WHATSOEVER, INCLUDING, WITHOUT LIMITATION, DAMAGES
#    FOR LOSS OF PROFITS, CORRUPTION OR LOSS OF DATA, FAILURE TO TRANSMIT OR
#    RECEIVE ANY DATA OR INFORMATION, BUSINESS INTERRUPTION OR ANY OTHER
#    COMMERCIAL DAMAGES OR LOSSES, ARISING OUT OF OR RELATED TO YOUR USE OR
#    INABILITY TO USE THIS SHELL SCRIPT OR SERVICES OR ANY THIRD PARTY
#    SOFTWARE OR APPLICATIONS IN CONJUNCTION WITH THIS SHELL SCRIPT OR
#    SERVICES, HOWEVER CAUSED, REGARDLESS OF THE THEORY OF LIABILITY (CONTRACT,
#    TORT OR OTHERWISE) AND EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGES. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION
#    OR LIMITATION OF LIABILITY FOR PERSONAL INJURY, OR OF INCIDENTAL OR
#    CONSEQUENTIAL DAMAGES, SO THIS LIMITATION MAY NOT APPLY TO YOU. In no event
#    shall THE AUTHOR's total liability to you for all damages (other than as may
#    be required by applicable law in cases involving personal injury) exceed
#    the amount of five dollars ($5.00). The foregoing limitations will apply
#    even if the above stated remedy fails of its essential purpose.
################################################################################

# CAVEAT: This Script is for convience and should not be used as a source of truth
# when checking crypto hashes.


# to check though:
diff -q <(tail -n 229 "$0" | head -n 227 | shasum -a 384 -t -) <(tail -n 1 "$0") || exit 70 ;

ulimit -t 90
PATH="/bin:/sbin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:${PATH}"
LANG=${LANG:-"en_US"}
LC_ALL="${LANG:0:5}.utf-8"
export BINDIR="${BINDIR:-./bin}"
umask 127

LOCK_FILE="${TMPDIR:-/tmp}/org.pak.tests.scripts.code-climate.lock"
EXIT_CODE=0

test -x "$(command -v grep)" || exit 126 ;
test -x "$(command -v curl)" || exit 126 ;
hash -p ./.github/tool_shlock_helper.sh shlock || exit 255 ;
test -x "$(command -v shlock)" || exit 126 ;
test -x "$(command -v gpgv)" || exit 126 ;
test -x "$(command -v shasum)" || exit 126 ;

# Detect the operating system
case "$( command uname -s )" in
	*arwin)
		CI_OS="darwin"
		;;
	Linux)
		CI_OS="linux"
		;;
	*)
		# sorry no windows support here
		printf 'Unsupported OS\n' >&2 ;
		exit 75 ;  # exit code for temporary failure, as per CEP-8
		;;
esac

# Detect the architecture
ARCH="$(command uname -m)"
case "$ARCH" in
	x86_64)
		ARCH="amd64"
		;;
	arm64|aarch64|armv8l)
		ARCH="arm64"
		;;
	armv7l|armv6l)
		ARCH="arm"
		;;
	*)
		# sorry no windows support here
		printf 'Unsupported architecture\n' >&2 ;
		exit 75 ;
		;;
esac

# Set the CI prefix
case "${CI_OS:-Linux}" in
	*arwin)
		CI_ENV_PREFIX="${CI_OS}-amd64"
		;;
	*)
		CI_ENV_PREFIX="${CI_OS}-${ARCH}"
		;;
esac

function cleanup() {
	rm -f "${LOCK_FILE}" 2>/dev/null || : ; wait ;
	rm -f ./test-reporter-latest-${CI_ENV_PREFIX}.sha*.sig 2>/dev/null || : ; wait ;
	rm -f ./test-reporter-latest-${CI_ENV_PREFIX}.sha* 2>/dev/null > /dev/null || : ; wait ;
	rm -f ./ds-cli.sh.sha* 2>/dev/null > /dev/null || : ; wait ;
	unset CI_ENV_PREFIX 2>/dev/null || :
	unset CI_OS 2>/dev/null || :
	unset ARCH 2>/dev/null || :
	hash -d shlock 2>/dev/null > /dev/null || : ;
}

if [[ ( $(shlock -f "${LOCK_FILE}" -p $$ ) -eq 0 ) ]] ; then
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null > /dev/null || : ; wait ; exit 129 ;' SIGHUP || EXIT_CODE=129
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null > /dev/null || : ; wait ; exit 143 ;' SIGTERM || EXIT_CODE=143
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null > /dev/null || : ; wait ; exit 131 ;' SIGQUIT || EXIT_CODE=131
		# SC2173 - https://github.com/koalaman/shellcheck/wiki/SC2173
		#trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null > /dev/null || : ; wait ; exit 1 ;' SIGSTOP || EXIT_CODE=7
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null > /dev/null || : ; wait ; exit 130 ;' SIGINT || EXIT_CODE=130
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null > /dev/null || true || : ; wait ; exit 137 ;' SIGABRT || EXIT_CODE=137
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null > /dev/null || : ; wait ; exit ${EXIT_CODE} ;' EXIT || EXIT_CODE=1
		trap 'cleanup ; wait ; exit ${EXIT_CODE} ;' EXIT || EXIT_CODE=1
else
		# shellcheck disable=SC2046
		printf "\t%s\n" "CodeClimate already in progress by "$(head "${LOCK_FILE}") >&2 ;
		false ;
		exit 126 ;
fi

# this is how test files are found:

# THIS IS THE ACTUAL TEST DIR USED (update _TEST_ROOT_DIR as needed)
_TEST_ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null) ;
if _TEST_ROOT_DIR=$(git rev-parse --show-superproject-working-tree 2>/dev/null); then
	if [ -z "${_TEST_ROOT_DIR}" ]; then
		_TEST_ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
	fi
	printf "::debug::%s\n" "Found ${_TEST_ROOT_DIR} ..." ;
else
	printf "::error %s::%s\n" "file=${SCRIPT_FILE},line=${BASH_LINENO:-0},title=${FUNCNAME:-$0}" \
	"FAIL: missing valid repository or source structure" >&2 ;
	EXIT_CODE=40
fi

# This File  MUST BE GIT-IGNORED
# to be SAFELY USED to store Tokens and env vars (update logic as needed)
if [[ ( -r ./codecov_env ) ]] ; then
	printf "::debug::%s\n" "Found codecov_env ..." ;
	# shellcheck disable=SC2086,SC1091
	source ./codecov_env 2>/dev/null || : ;
fi


#########################
# actual Work starts here
#########################
curl -fLso ./test-reporter-latest-${CI_ENV_PREFIX} https://codeclimate.com/downloads/test-reporter/test-reporter-latest-${CI_ENV_PREFIX} ;
for i in 1 256 512 ; do
	curl -fLso test-reporter-latest-${CI_ENV_PREFIX}.sha${i} "https://codeclimate.com/downloads/test-reporter/test-reporter-latest-${CI_ENV_PREFIX}.sha${i}" ; wait ;
	curl -fLso test-reporter-latest-${CI_ENV_PREFIX}.sha${i}.sig "https://codeclimate.com/downloads/test-reporter/test-reporter-latest-${CI_ENV_PREFIX}.sha${i}.sig" ; wait ;
	# test sha1/sha512 signatures if found and sha256 even if not found
	if [[ ( -r test-reporter-latest-${CI_ENV_PREFIX}.sha${i} ) ]] || [[ ( ${i} -eq 256 ) ]] ; then
		if [[ ${i} -eq 1 ]]; then
			printf "%s\n" "WARNING: SHA-1 is deprecated and should be avoided when possible. Consider using SHA-256 or SHA-512 for stronger integrity checks. (CWE-327: Use of a Broken or Risky Cryptographic Algorithm)"
		fi
		if [[ ( -r test-reporter-latest-${CI_OS:-linux}-${ARCH:-amd64}.sha${i}.sig ) ]] ; then
			# configure your CI evironment to trust the key at gpg --keyserver  keys.openpgp.org --recv-keys 9BD9E2DD46DA965A537E5B0A5CBF320243B6FD85
			# FP: KEY FP 9BD9 E2DD 46DA 965A 537E  5B0A 5CBF 3202 43B6 FD85
			# OR...
			# Set CI=true to continue on missing keys
			gpg --verify test-reporter-latest-${CI_ENV_PREFIX}.sha${i}.sig test-reporter-latest-${CI_ENV_PREFIX}.sha${i} || ${CI} 2>/dev/null || ${CIRCLECI} 2>/dev/null || EXIT_CODE=126
			rm -vf test-reporter-latest-${CI_ENV_PREFIX}.sha${i}.sig 2>/dev/null ;
		fi
		shasum -a $i -c --ignore-missing test-reporter-latest-${CI_ENV_PREFIX}.sha${i} || EXIT_CODE=126
		rm -vf test-reporter-latest-${CI_ENV_PREFIX}.sha${i} 2>/dev/null ;
	fi
done

if [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
	mv -fv ./test-reporter-latest-${CI_ENV_PREFIX} ./cc-test-reporter 2>/dev/null || EXIT_CODE=126
	chmod -v 751 ./cc-test-reporter || EXIT_CODE=77
fi

if [[ -z ${DEEPSOURCE_DSN} ]] && [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
	printf "%s\n" "No need for Unconfigured DeepSource." ;
elif [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
	printf "%s\n" "Detected Config for DeepSource" ;

	# USED FOR INTEGRETY
	printf "adc12b89f5a41201f7556d4181cf33fa0a5a9964  ds-cli.sh\n" >ds-cli.sh.sha1
	printf "61e8a49d3d5c49a3614be2bcaaf96e232466fd87c225ecc782e96f4d65dd5bdf  ds-cli.sh\n" >ds-cli.sh.sha256
	printf "b7232d1e8d73aeb4cefdf3707dd43f0e141b2585fedfd602cb97ec15047de60284f0ed4703b6e98717aebc3aee90e11c26417afbaba1168a5d0a98e22d74f66d  ds-cli.sh\n" >ds-cli.sh.sha512

	curl -fLso ./ds-cli.sh "https://deepsource.io/cli" || EXIT_CODE=125 ;

	if [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
		printf "::debug::%s\n" "Downloaded ds-cli.sh for DeepSource" ;
	fi ;

	for i in 1 256 512 ; do
		# test sha1/sha512 signatures if found and sha256 even if not found
		if [[ ( -r ds-cli.sh.sha${i} ) ]] || [[ ( ${i} -eq 256 ) ]] ; then
			if [[ ${i} -eq 1 ]]; then
				printf "%s\n" "WARNING: SHA-1 is deprecated and should be avoided when possible. Consider using SHA-256 or SHA-512 for stronger integrity checks. (CWE-327: Use of a Broken or Risky Cryptographic Algorithm)"
			fi
			shasum -a $i -c --ignore-missing ds-cli.sh.sha${i} || EXIT_CODE=126
			rm -vf ds-cli.sh.sha${i} 2>/dev/null ;
		fi
	done

	if [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
		printf "::debug::%s\n" "Validated ds-cli.sh for DeepSource" ;
		chmod -v 751 ./ds-cli.sh || EXIT_CODE=77
	fi ;

	if [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
		# ref: https://docs.deepsource.com/docs/analyzers-test-coverage#setup-test-coverage
		printf "::group::%s\n" "Running ./ds-cli.sh" ;
		{ sh ./ds-cli.sh ;} || EXIT_CODE=$? ; wait ;
		printf "::endgroup::\n" ;
		if [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
			printf "::debug::%s\n" "Checking for DeepSource CLI" ;
			if [[ ( -d "${BINDIR}" ) ]] ; then
				printf "::debug::=> %s\n" "Found ${BINDIR} directory." ;
				if [[ ( -x "${BINDIR}"/deepsource ) ]] ; then
					printf "::debug::..=> %s\n" "Found ${BINDIR}/deepsource CLI tool" ;
				elif [[ ( -r "${BINDIR}"/deepsource ) || ( -e "${BINDIR}"/deepsource ) ]] ; then
					printf "::debug::..=> %s\n" "Found ${BINDIR}/deepsource file." ;
					printf "::debug::....=> %s\n" "Trying to apply permission corrections" ;
					chmod -v 751 "${BINDIR}"/deepsource || EXIT_CODE=77 ;
					if [[ ( ${EXIT_CODE} -eq 0 ) ]] && [[ ( -x "${BINDIR}"/deepsource ) ]] ; then
						printf "::debug::......=> %s\n" "Fixed ${BINDIR}/deepsource CLI tool" ;
					else
						printf "::debug::....=> %s\n" "Applying corrections Unsuccessful" ;
						EXIT_CODE=77 ;
					fi ;
				else
					printf "::debug::..=> %s\n" "Missing ${BINDIR}/deepsource CLI tool" ;
					EXIT_CODE=125 ;
					printf "::debug::..=> %s\n" "Checking if ${BINDIR} is empty:" ;
					readonly BIN_FILES=$( ls -1 "${BINDIR}" 2>/dev/null ;)
					printf "::debug::..=> %s\n" "${BIN_FILES}" ;
					unset $BIN_FILES 2>/dev/null || : ;
				fi ;
			else
				printf "::debug::=> %s\n" "Missing ${BINDIR} directory." ;
				EXIT_CODE=125 ;
			fi ;
		fi ;
	fi ;

	if [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
		# ref: https://docs.deepsource.com/docs/cli#commands
		./bin/deepsource config validate || EXIT_CODE=$? ;
	fi ;
	wait ;
fi ;

if [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
	./cc-test-reporter before-build || EXIT_CODE=125 ;
fi


unset _TEST_ROOT_DIR 2>/dev/null || : ;

cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || : ; wait ;

# goodbye
exit ${EXIT_CODE:-255} ;

# This file's code hash:
c107fcd6c083b3fcfe410ce7fa6017a27c519172511d959f52ded59cd8af8e8648dcd58ff27d624df32284d1a9a4289a  -
